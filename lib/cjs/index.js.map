{"version":3,"sources":["../../src/index.ts"],"names":["global","jestExpect","expect","undefined","extend","matchers","console","error"],"mappings":";;;;;;;;AAKA;;AACA;;AAYA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AACA;;AACA;;AACA;;AACA;AAIA,IAAI,8CAAsBA,MAAtB,CAAJ,EAAmC;AACjC,QAAMC,UAAU,GAAGD,MAAM,CAACE,MAA1B;;AAEA,MAAID,UAAU,KAAKE,SAAnB,EAA8B;AAC5BF,IAAAA,UAAU,CAACG,MAAX,CAAkBC,mBAAlB;AACD,GAFD,MAEO;AACLC,IAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd;AACD;AACF","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport matchers from \"./assertions\";\nimport { isGlobalWithExpectKey } from \"./assertions/utils/globalTypeChecker\";\n\nif (isGlobalWithExpectKey(global)) {\n  const jestExpect = global.expect;\n\n  if (jestExpect !== undefined) {\n    jestExpect.extend(matchers);\n  } else {\n    console.error(\"Unable to find Jest's global expect.\");\n  }\n}\n\nexport * from \"./helpers\";\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toExistAsS3Bucket(): Promise<R>;\n      toExistInDynamoTable(table: string): Promise<R>;\n      toHaveContentEqualTo(\n        content: Record<string, unknown> | string\n      ): Promise<R>;\n      toHaveContentTypeEqualTo(contentType: string): Promise<R>;\n      toHaveEvent(): R;\n      toHaveEventWithSource(expectedSourceName: string): R;\n      toHaveS3ObjectWithNameEqualTo(objectName: string): Promise<R>;\n      toContainItemWithValues(values:{ [key: string]: unknown }): Promise<R>;\n    }\n  }\n}\n"],"file":"index.js"}