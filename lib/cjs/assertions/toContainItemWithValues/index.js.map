{"version":3,"sources":["../../../../src/assertions/toContainItemWithValues/index.ts"],"names":["toContainItemWithValues","tableName","values","docClient","AWSClient","DynamoDB","DocumentClient","region","keys","pk","undefined","sk","queryParams","Key","TableName","allMatched","itemExists","result","get","promise","Object","entries","forEach","key","val","Item","e","console","log"],"mappings":";;;;;;;AAAA;;AACA;;eAGe;AACb,QAAMA,uBAAN,CACEC,SADF,EAEEC,MAFF,EAG6B;AAC3B,UAAMC,SAAS,GAAG,IAAIC,mBAAUC,QAAV,CAAmBC,cAAvB,CAAsC;AACtDC,MAAAA,MAAM,EAAEA;AAD8C,KAAtC,CAAlB;AAGA,UAAMC,IAAmC,GAAG;AAAEC,MAAAA,EAAE,EAAEP,MAAM,CAAC,IAAD;AAAZ,KAA5C;;AACA,QAAIA,MAAM,CAAC,IAAD,CAAN,KAAiBQ,SAArB,EAAgC;AAC9BF,MAAAA,IAAI,CAACG,EAAL,GAAUT,MAAM,CAAC,IAAD,CAAhB;AACD;;AACD,UAAMU,WAAW,GAAG;AAClBC,MAAAA,GAAG,EAAEL,IADa;AAElBM,MAAAA,SAAS,EAAEb;AAFO,KAApB;AAIA,QAAIc,UAAU,GAAG,IAAjB;AACA,QAAIC,UAAU,GAAG,IAAjB;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMd,SAAS,CAACe,GAAV,CAAcN,WAAd,EAA2BO,OAA3B,EAArB;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAenB,MAAf,EAAuBoB,OAAvB,CAA+B,CAAC,CAACC,GAAD,EAAMC,GAAN,CAAD,KAAgB;AAC7C,YAAIP,MAAM,CAACQ,IAAP,KAAgBf,SAApB,EAA+B;AAC7B,cAAIa,GAAG,IAAIN,MAAM,CAACQ,IAAlB,EAAwB;AACtB,gBAAIR,MAAM,CAACQ,IAAP,CAAYF,GAAZ,MAAqBC,GAAzB,EAA8B;AAC5BT,cAAAA,UAAU,GAAG,KAAb;AACD;AACF;AACF,SAND,MAMO;AACLC,UAAAA,UAAU,GAAG,KAAb;AACD;AACF,OAVD;;AAWA,UAAI,CAACA,UAAL,EAAiB;AACf,eAAO,4BAAY,sBAAZ,EAAmC,KAAnC,CAAP;AACD,OAFD,MAEO,IAAI,CAACD,UAAL,EAAiB;AACtB,eAAO,4BAAY,uCAAZ,EAAoD,KAApD,CAAP;AACD,OAFM,MAEA;AACL,eAAO,4BAAW,kCAAX,EAA+C,IAA/C,CAAP;AACD;AACF,KApBD,CAoBE,OAAOW,CAAP,EAAe;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEA,aAAO,4BAAW,0CAAX,EAAuD,KAAvD,CAAP;AACD;AACF;;AA3CY,C","sourcesContent":["import { testResult, TestResultOutput } from \"utils/testResult\";\nimport { AWSClient } from \"helpers/general\";\nimport { region } from \"../../helpers/general\";\n\nexport default {\n  async toContainItemWithValues(\n    tableName: string,\n    values: { [key: string]: unknown }\n  ): Promise<TestResultOutput> {\n    const docClient = new AWSClient.DynamoDB.DocumentClient({\n      region: region,\n    });\n    const keys: { pk: unknown; sk?: unknown } = { pk: values[\"PK\"] };\n    if (values[\"SK\"] !== undefined) {\n      keys.sk = values[\"SK\"];\n    }\n    const queryParams = {\n      Key: keys,\n      TableName: tableName,\n    };\n    let allMatched = true;\n    let itemExists = true;\n    try {\n      const result = await docClient.get(queryParams).promise();\n      Object.entries(values).forEach(([key, val]) => {\n        if (result.Item !== undefined) {\n          if (key in result.Item) {\n            if (result.Item[key] !== val) {\n              allMatched = false;\n            }\n          }\n        } else {\n          itemExists = false;\n        }\n      });\n      if (!itemExists) {\n        return testResult(`Item does not exist.`, false);\n      } else if (!allMatched) {\n        return testResult(`Some values do not match as expected.`, false);\n      } else {\n        return testResult(\"Item exists with expected values\", true);\n      }\n    } catch (e: any) {\n      console.log(e);\n\n      return testResult(\"Item with specified keys does not exist.\", false);\n    }\n  },\n};\n"],"file":"index.js"}