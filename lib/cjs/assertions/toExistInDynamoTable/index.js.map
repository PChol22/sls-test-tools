{"version":3,"sources":["../../../../src/assertions/toExistInDynamoTable/index.ts"],"names":["toExistInDynamoTable","PK","SK","tableName","docClient","AWSClient","DynamoDB","DocumentClient","undefined","queryParams","TableName","KeyConditionExpression","ExpressionAttributeNames","ExpressionAttributeValues","Limit","result","query","promise","message","pass","Count","getParams","Key","get","Item"],"mappings":";;;;;;;AACA;;eAEe;AACb,QAAMA,oBAAN,CACE;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GADF,EAEEC,SAFF,EAG6B;AAC3B,UAAMC,SAAS,GAAG,IAAIC,mBAAUC,QAAV,CAAmBC,cAAvB,EAAlB;;AACA,QAAIL,EAAE,KAAKM,SAAX,EAAsB;AACpB,YAAMC,WAAW,GAAG;AAClBC,QAAAA,SAAS,EAAEP,SADO;AAElBQ,QAAAA,sBAAsB,EAAE,WAFN;AAGlBC,QAAAA,wBAAwB,EAAE;AACxB,iBAAO;AADiB,SAHR;AAMlBC,QAAAA,yBAAyB,EAAE;AACzB,iBAAO;AADkB,SANT;AASlBC,QAAAA,KAAK,EAAE;AATW,OAApB;AAWA,YAAMC,MAAM,GAAG,MAAMX,SAAS,CAACY,KAAV,CAAgBP,WAAhB,EAA6BQ,OAA7B,EAArB;AAEA,aAAO;AACLC,QAAAA,OAAO,EAAE,MAAO,oBAAmBjB,EAAG,OAAME,SAAU,EADjD;AAELgB,QAAAA,IAAI,EAAEJ,MAAM,CAACK,KAAP,KAAiB;AAFlB,OAAP;AAID;;AACD,UAAMC,SAAS,GAAG;AAChBX,MAAAA,SAAS,EAAEP,SADK;AAEhBmB,MAAAA,GAAG,EAAE;AACHrB,QAAAA,EADG;AAEHC,QAAAA;AAFG;AAFW,KAAlB;AAOA,UAAMa,MAAM,GAAG,MAAMX,SAAS,CAACmB,GAAV,CAAcF,SAAd,EAAyBJ,OAAzB,EAArB;AAEA,WAAO;AACLC,MAAAA,OAAO,EAAE,MAAO,oBAAmBjB,EAAG,OAAME,SAAU,EADjD;AAELgB,MAAAA,IAAI,EAAEJ,MAAM,CAACS,IAAP,KAAgBhB;AAFjB,KAAP;AAID;;AAtCY,C","sourcesContent":["import { TestResultOutput } from \"utils/testResult\";\nimport { AWSClient } from \"helpers/general\";\n\nexport default {\n  async toExistInDynamoTable(\n    { PK, SK }: { PK: string; SK?: string },\n    tableName: string\n  ): Promise<TestResultOutput> {\n    const docClient = new AWSClient.DynamoDB.DocumentClient();\n    if (SK === undefined) {\n      const queryParams = {\n        TableName: tableName,\n        KeyConditionExpression: \"#pk = :pk\",\n        ExpressionAttributeNames: {\n          \"#pk\": \"PK\",\n        },\n        ExpressionAttributeValues: {\n          \":pk\": \"PK\",\n        },\n        Limit: 1,\n      };\n      const result = await docClient.query(queryParams).promise();\n\n      return {\n        message: () => `expected to find ${PK} in ${tableName}`,\n        pass: result.Count === 1,\n      };\n    }\n    const getParams = {\n      TableName: tableName,\n      Key: {\n        PK,\n        SK,\n      },\n    };\n    const result = await docClient.get(getParams).promise();\n\n    return {\n      message: () => `expected to find ${PK} in ${tableName}`,\n      pass: result.Item !== undefined,\n    };\n  },\n};\n"],"file":"index.js"}