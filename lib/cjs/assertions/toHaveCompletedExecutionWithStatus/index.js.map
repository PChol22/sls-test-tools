{"version":3,"sources":["../../../../src/assertions/toHaveCompletedExecutionWithStatus/index.ts"],"names":["toHaveCompletedExecutionWithStatus","stateMachineName","expectedStatus","stepFunctions","AWSClient","StepFunctions","stepFunctionsObject","build","smArn","obtainStateMachineArn","listExecutionsParams","stateMachineArn","smExecutions","listExecutions","promise","latestExecution","executions","status"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;eAEe;AACb,QAAMA,kCAAN,CACEC,gBADF,EAEEC,cAFF,EAG6B;AAC3B,UAAMC,aAAa,GAAG,IAAIC,mBAAUC,aAAd,EAAtB;AACA,UAAMC,mBAAmB,GAAG,MAAMD,uBAAcE,KAAd,EAAlC,CAF2B,CAG3B;;AACA,UAAMC,KAAK,GAAG,MAAMF,mBAAmB,CAACG,qBAApB,CAClBR,gBADkB,CAApB;AAIA,UAAMS,oBAAoB,GAAG;AAAEC,MAAAA,eAAe,EAAEH;AAAnB,KAA7B,CAR2B,CAS3B;;AACA,UAAMI,YAAY,GAAG,MAAMT,aAAa,CACrCU,cADwB,CACTH,oBADS,EAExBI,OAFwB,EAA3B,CAV2B,CAa3B;;AACA,UAAMC,eAAe,GAAGH,YAAY,CAACI,UAAb,CAAwB,CAAxB,CAAxB;;AACA,QAAID,eAAe,CAACE,MAAhB,KAA2Bf,cAA/B,EAA+C;AAC7C,aAAO,4BACJ,uBAAsBA,cAAe,gBADjC,EAEL,IAFK,CAAP;AAID;;AAED,WAAO,4BACJ,wBAAuBa,eAAe,CAACE,MAAO,iCAAgCf,cAAe,EADzF,EAEL,KAFK,CAAP;AAID;;AA9BY,C","sourcesContent":["import { testResult, TestResultOutput } from \"../../utils/testResult\";\nimport StepFunctions from \"../../helpers/stepFunctions\";\n\nimport { AWSClient } from \"../../helpers/general\";\n\nexport default {\n  async toHaveCompletedExecutionWithStatus(\n    stateMachineName: string,\n    expectedStatus: string\n  ): Promise<TestResultOutput> {\n    const stepFunctions = new AWSClient.StepFunctions();\n    const stepFunctionsObject = await StepFunctions.build();\n    // Helper to get stateMachine ARN from stateMachine name\n    const smArn = await stepFunctionsObject.obtainStateMachineArn(\n      stateMachineName\n    );\n\n    const listExecutionsParams = { stateMachineArn: smArn };\n    // Get all executions of specified state machine\n    const smExecutions = await stepFunctions\n      .listExecutions(listExecutionsParams)\n      .promise();\n    // Get the latest execution (list ordered in reverse chronological)\n    const latestExecution = smExecutions.executions[0];\n    if (latestExecution.status === expectedStatus) {\n      return testResult(\n        `Execution status is ${expectedStatus}, as expected.`,\n        true\n      );\n    }\n\n    return testResult(\n      `Execution status was ${latestExecution.status}, where it was expected to be ${expectedStatus}`,\n      false\n    );\n  },\n};\n"],"file":"index.js"}