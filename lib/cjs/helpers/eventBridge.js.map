{"version":3,"sources":["../../../src/helpers/eventBridge.ts"],"names":["EventBridge","init","eventBridgeName","eventBridgeClient","AWSClient","ruleName","targetId","keepArg","process","argv","filter","x","startsWith","keepArgEnabled","split","keepEnvVarEnabled","env","SLS_TEST_TOOLS_KEEP","keep","ruleNameArg","queueNameArg","queueName","sqsClient","SQS","console","info","queueResult","createQueue","QueueName","promise","QueueUrl","undefined","Error","accountId","sqsArn","region","pattern","account","putRule","Name","EventBusName","EventPattern","JSON","stringify","State","putTargets","Rule","Targets","Arn","Id","policy","Version","Statement","Effect","Principal","Service","Action","Resource","setQueueAttributes","Attributes","Policy","build","eventBridge","publishEvent","source","detailType","detail","clear","result","putEvents","Entries","Source","DetailType","Detail","getEvents","queueParams","WaitTimeSeconds","receiveMessage","messageHandlers","Messages","map","message","MessageId","ReceiptHandle","length","deleteMessageBatch","purgeQueue","destroy","deleteQueue","removeTargets","Ids","deleteRule"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { AWSError, EventBridge as AWSEventBridge, SQS } from \"aws-sdk\";\nimport { PromiseResult } from \"aws-sdk/lib/request\";\nimport { AWSClient, region } from \"./general\";\nimport { removeUndefinedMessages } from \"./utils/removeUndefinedMessages\";\n\nexport default class EventBridge {\n  QueueUrl: string | undefined;\n  eventBridgeClient: AWSEventBridge | undefined;\n  eventBridgeName: string | undefined;\n  keep: boolean | undefined;\n  ruleName: string | undefined;\n  sqsClient: SQS | undefined;\n  targetId: string | undefined;\n\n  async init(eventBridgeName: string): Promise<void> {\n    this.eventBridgeClient = new AWSClient.EventBridge();\n    this.eventBridgeName = eventBridgeName;\n    this.ruleName = `test-${eventBridgeName}-rule`;\n    this.targetId = \"1\";\n\n    const keepArg = process.argv.filter((x) => x.startsWith(\"--keep=\"))[0];\n    const keepArgEnabled = keepArg ? keepArg.split(\"=\")[1] === \"true\" : false;\n    const keepEnvVarEnabled = !!process.env.SLS_TEST_TOOLS_KEEP;\n    this.keep = keepArgEnabled || keepEnvVarEnabled;\n    const ruleNameArg = process.argv.filter((x) => x.startsWith(\"--event-rule-name=\"))[0];\n    this.ruleName = ruleNameArg ? ruleNameArg.split(\"=\")[1] : `test-${eventBridgeName}-rule`;\n    const queueNameArg = process.argv.filter((x) => x.startsWith(\"--queue-name=\"))[0];\n    const queueName = queueNameArg ? queueNameArg.split(\"=\")[1] : `${eventBridgeName}-testing-queue`;\n\n    this.sqsClient = new AWSClient.SQS();\n    if (!this.keep) {\n      console.info(\n        \"If running repeatedly add '--keep=true' to keep testing resources up to avoid creation throttles\"\n      );\n    }\n\n    const queueResult = await this.sqsClient\n      .createQueue({\n        QueueName: queueName,\n      })\n      .promise();\n\n    this.QueueUrl = queueResult.QueueUrl;\n\n    if (this.QueueUrl === undefined) {\n      throw new Error(\"QueueUrl is undefined\");\n    }\n    const accountId = this.QueueUrl.split(\"/\")[3];\n    const sqsArn = `arn:aws:sqs:${region}:${accountId}:${queueName}`;\n    const pattern = {\n      account: [`${accountId}`],\n    };\n\n    await this.eventBridgeClient\n      .putRule({\n        Name: this.ruleName,\n        EventBusName: eventBridgeName,\n        EventPattern: JSON.stringify(pattern),\n        State: \"ENABLED\",\n      })\n      .promise();\n\n    await this.eventBridgeClient\n      .putTargets({\n        EventBusName: eventBridgeName,\n        Rule: this.ruleName,\n        Targets: [\n          {\n            Arn: sqsArn,\n            Id: this.targetId,\n          },\n        ],\n      })\n      .promise();\n\n    const policy = {\n      Version: \"2008-10-17\",\n      Statement: [\n        {\n          Effect: \"Allow\",\n          Principal: {\n            Service: \"events.amazonaws.com\",\n          },\n          Action: \"SQS:SendMessage\",\n          Resource: sqsArn,\n        },\n      ],\n    };\n\n    await this.sqsClient\n      .setQueueAttributes({\n        Attributes: {\n          Policy: JSON.stringify(policy),\n        },\n        QueueUrl: this.QueueUrl,\n      })\n      .promise();\n  }\n\n  static async build(eventBridgeName: string): Promise<EventBridge> {\n    const eventBridge = new EventBridge();\n    await eventBridge.init(eventBridgeName);\n\n    return eventBridge;\n  }\n\n  // eslint-disable-next-line max-params\n  async publishEvent(\n    source: string | undefined,\n    detailType: string | undefined,\n    detail: string | undefined,\n    clear?: boolean\n  ): Promise<PromiseResult<AWSEventBridge.PutEventsResponse, AWSError>> {\n    if (this.eventBridgeClient === undefined) {\n      throw new Error(\n        \"EventBridgeClient is undefined. You might have forgotten to use init()\"\n      );\n    }\n    const result = await this.eventBridgeClient\n      .putEvents({\n        Entries: [\n          {\n            EventBusName: this.eventBridgeName,\n            Source: source,\n            DetailType: detailType,\n            Detail: detail,\n          },\n        ],\n      })\n      .promise();\n\n    if (clear === undefined) {\n      clear = true;\n    }\n    if (!clear) {\n      return result;\n    }\n    await this.getEvents(); // need to clear this manual published event from the SQS observer queue.\n\n    return result;\n  }\n\n  async getEvents(\n    clear?: boolean | undefined\n  ): Promise<SQS.ReceiveMessageResult | undefined> {\n    if (this.QueueUrl === undefined) {\n      throw new Error(\"QueueUrl is undefined\");\n    }\n    // Long poll SQS queue\n    const queueParams = {\n      QueueUrl: this.QueueUrl,\n      WaitTimeSeconds: 5,\n    };\n    if (this.sqsClient === undefined) {\n      throw new Error(\n        \"SQSClient is undefined. You might have forgotten to use init()\"\n      );\n    }\n    const result = await this.sqsClient.receiveMessage(queueParams).promise();\n\n    if (clear === undefined) {\n      clear = true;\n    }\n\n    if (!clear) {\n      return result;\n    }\n\n    const messageHandlers = removeUndefinedMessages(\n      result.Messages?.map((message: SQS.Message) => ({\n        Id: message.MessageId,\n        ReceiptHandle: message.ReceiptHandle,\n      }))\n    );\n\n    if (messageHandlers !== undefined && messageHandlers.length > 0) {\n      await this.sqsClient\n        .deleteMessageBatch({\n          Entries: messageHandlers,\n          QueueUrl: this.QueueUrl,\n        })\n        .promise();\n    }\n\n    return result;\n  }\n\n  async clear(): Promise<any> {\n    if (this.sqsClient === undefined) {\n      throw new Error(\n        \"SQSClient is undefined. You might have forgotten to use init()\"\n      );\n    }\n    if (this.QueueUrl === undefined) {\n      throw new Error(\"QueueUrl is undefined\");\n    }\n    const result = await this.sqsClient\n      .purgeQueue({\n        QueueUrl: this.QueueUrl,\n      })\n      .promise();\n\n    return result;\n  }\n\n  async destroy(): Promise<boolean> {\n    if (this.keep === undefined) {\n      throw new Error(\n        \"keep is undefined. You might have forgotten to use init()\"\n      );\n    }\n    if (!this.keep) {\n      if (this.sqsClient === undefined) {\n        throw new Error(\n          \"SQSClient is undefined. You might have forgotten to use init()\"\n        );\n      }\n      if (this.QueueUrl === undefined) {\n        throw new Error(\"QueueUrl is undefined\");\n      }\n\n      await this.sqsClient\n        .deleteQueue({\n          QueueUrl: this.QueueUrl,\n        })\n        .promise();\n\n      if (this.eventBridgeClient === undefined) {\n        throw new Error(\n          \"EventBridgeClient is undefined. You might have forgotten to use init()\"\n        );\n      }\n\n      if (this.targetId === undefined) {\n        throw new Error(\n          \"targetId is undefined. You might have forgotten to use init()\"\n        );\n      }\n      if (this.ruleName === undefined) {\n        throw new Error(\n          \"ruleName is undefined. You might have forgotten to use init()\"\n        );\n      }\n      await this.eventBridgeClient\n        .removeTargets({\n          Ids: [this.targetId],\n          Rule: this.ruleName,\n          EventBusName: this.eventBridgeName,\n        })\n        .promise();\n\n      await this.eventBridgeClient\n        .deleteRule({\n          Name: this.ruleName,\n          EventBusName: this.eventBridgeName,\n        })\n        .promise();\n    } else {\n      await this.clear();\n    }\n\n    return true;\n  }\n}\n"],"file":"eventBridge.js"}