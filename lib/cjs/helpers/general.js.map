{"version":3,"sources":["../../../src/helpers/general.ts"],"names":["stackName","cliArg","processEnvName","profile","defaultValue","region","creds","process","env","AWS_ACCESS_KEY_ID","undefined","AWS_SECRET_ACCESS_KEY","AWS","Credentials","accessKeyId","secretAccessKey","sessionToken","AWS_SESSION_TOKEN","SharedIniFileCredentials","callback","err","console","error","name","message","config","credentials","AWSClient","cloudformation","CloudFormation","getStackResources","stack","describeStacks","StackName","promise","catch","apigateway","APIGateway","apiKey","getOptions","resources","listStackResources","stackResourceSummaries","StackResourceSummaries","stackResourceSummary","find","r","ResourceType","id","PhysicalResourceId","params","includeValue","data","getApiKey","value","method","headers"],"mappings":"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","sourcesContent":["import AWS, { AWSError } from \"aws-sdk\";\nimport { DescribeStacksOutput } from \"aws-sdk/clients/cloudformation\";\nimport { PromiseResult } from \"aws-sdk/lib/request\";\nimport { loadArg } from \"./utils/loadArg\";\n\nexport const stackName = loadArg({\n  cliArg: \"stack\",\n  processEnvName: \"CFN_STACK_NAME\",\n});\n\nconst profile = loadArg({\n  cliArg: \"profile\",\n  processEnvName: \"AWS_PROFILE\",\n  defaultValue: \"default\",\n});\n\nexport const region = loadArg({\n  cliArg: \"region\",\n  processEnvName: \"AWS_REGION\",\n  defaultValue: \"eu-west-2\",\n});\n\nlet creds;\n\nif (\n  process.env.AWS_ACCESS_KEY_ID !== undefined &&\n  process.env.AWS_SECRET_ACCESS_KEY !== undefined\n) {\n  creds = new AWS.Credentials({\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n    sessionToken: process.env.AWS_SESSION_TOKEN,\n  });\n} else {\n  creds = new AWS.SharedIniFileCredentials({\n    profile,\n    callback: (err) => {\n      if (err) {\n        console.error(`SharedIniFileCreds Error: ${err.name} - ${err.message}`);\n      }\n    },\n  });\n}\n\nAWS.config.credentials = creds;\nAWS.config.region = region;\n\nexport const AWSClient = AWS;\n\nconst cloudformation = new AWSClient.CloudFormation();\n\nexport const getStackResources = (\n  stack: string | undefined\n): Promise<void | PromiseResult<DescribeStacksOutput, AWSError>> =>\n  cloudformation\n    .describeStacks({ StackName: stack })\n    .promise()\n    .catch((error) => {\n      console.error(error);\n    });\n\nconst apigateway = new AWSClient.APIGateway();\nlet apiKey: string | null = null;\n\ninterface GetOptionsOutput {\n  method: string;\n  headers: { \"x-api-key\": string | null; \"Content-Type\": string };\n}\n\nexport const getOptions = async (): Promise<void | GetOptionsOutput> => {\n  if (apiKey === null) {\n    const resources = await cloudformation\n      .listStackResources({ StackName: stackName })\n      .promise();\n\n    const stackResourceSummaries = resources.StackResourceSummaries;\n    if (stackResourceSummaries === undefined) {\n      return;\n    }\n\n    const stackResourceSummary = stackResourceSummaries.find(\n      (r) => r.ResourceType === \"AWS::ApiGateway::ApiKey\"\n    );\n\n    if (stackResourceSummary === undefined) {\n      return;\n    }\n\n    const id = stackResourceSummary.PhysicalResourceId;\n\n    if (id === undefined) {\n      return;\n    }\n    const params = {\n      apiKey: id,\n      includeValue: true,\n    };\n\n    const data = await apigateway.getApiKey(params).promise();\n    apiKey = data.value !== undefined ? data.value : null;\n  }\n\n  return {\n    method: \"POST\",\n    headers: {\n      \"x-api-key\": apiKey,\n      \"Content-Type\": \"application/json\",\n    },\n  };\n};\n"],"file":"general.js"}