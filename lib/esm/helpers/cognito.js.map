{"version":3,"sources":["../../../src/helpers/cognito.ts"],"names":["createUser","createUserInput","username","cognitoClient","AWSClient","CognitoIdentityServiceProvider","chance","Chance","password","string","length","givenName","first","middleName","familyName","last","name","country","streetAddress","street","locality","city","region","province","postalCode","postcode","formatted","join","address","street_address","postal_code","allStandardAttributes","email","birthdate","date","toISOString","split","family_name","gender","given_name","locale","middle_name","nickname","phone_number","phone","picture","url","preferred_username","profile","website","zoneinfo","JSON","stringify","updated_at","String","timestamp","attributesArg","jsf","extend","customAttributes","undefined","Object","entries","forEach","key","val","push","Name","Value","generate","type","standardAttributes","attribute","signUpParams","ClientId","clientId","Username","Password","UserAttributes","signUp","promise","e","console","log","error","confirmUser","input","adminConfirmSignUp","UserPoolId","userPoolId","confirmed","createUnauthenticatedUser","user","createAuthenticatedUser","auth","initiateAuth","AuthFlow","AuthParameters","USERNAME","PASSWORD","idToken","AuthenticationResult","IdToken","accessToken","AccessToken"],"mappings":"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","sourcesContent":["import { CognitoIdentityServiceProvider } from \"aws-sdk\";\nimport { AWSClient } from \"./general\";\nimport { Chance } from \"chance\";\nimport { AttributeType } from \"aws-sdk/clients/cognitoidentityserviceprovider\";\nimport jsf from \"json-schema-faker\";\n\ninterface User {\n  username: string;\n  password: string;\n  confirmed?: boolean | undefined;\n  standardAttributes?: StandardAttributes;\n  customAttributes?: { [attribute: string]: string };\n}\n\ninterface CreateUserInput {\n  clientId: string;\n  userPoolId: string;\n  confirmed: boolean;\n  standardAttributes?: Array<keyof StandardAttributes>;\n  customAttributes?: { [key: string]: unknown };\n}\n\ninterface ConfirmUserInput {\n  userPoolId: string;\n  username: string;\n  password: string;\n}\n\ninterface Address {\n  formatted: string;\n  street_address: string;\n  locality: string;\n  region: string;\n  postal_code: string;\n  country: string;\n}\n\ninterface StandardAttributes {\n  address: string;\n  birthdate: string;\n  email: string;\n  family_name: string;\n  gender: string;\n  given_name: string;\n  locale: string;\n  middle_name: string;\n  name: string;\n  nickname: string;\n  phone_number: string;\n  picture: string;\n  preferred_username: string;\n  profile: string;\n  updated_at: string;\n  website: string;\n  zoneinfo: string;\n}\n\nconst createUser = async (\n  createUserInput: CreateUserInput,\n  username: string\n): Promise<User> => {\n  const cognitoClient: CognitoIdentityServiceProvider =\n    new AWSClient.CognitoIdentityServiceProvider();\n  const chance = new Chance();\n  const password: string = chance.string({ length: 8 });\n\n  const givenName = chance.first();\n  const middleName = chance.first();\n  const familyName = chance.last();\n  const name = givenName + \" \" + middleName + \" \" + familyName;\n\n  const country = chance.country();\n  const streetAddress = chance.street();\n  const locality = chance.city();\n  const region = chance.province();\n  const postalCode = chance.postcode();\n\n  const formatted = [streetAddress, locality, region, postalCode, country].join(\n    \"\\r\\n\"\n  );\n\n  const address: Address = {\n    formatted: formatted,\n    street_address: streetAddress,\n    locality: locality,\n    region: region,\n    postal_code: postalCode,\n    country: country,\n  };\n\n  const allStandardAttributes: StandardAttributes = {\n    email: chance.email(),\n    birthdate: chance.date().toISOString().split(\"T\")[0],\n    family_name: familyName,\n    gender: chance.gender(),\n    given_name: givenName,\n    locale: chance.locale(),\n    middle_name: middleName,\n    name: name,\n    nickname: chance.string(),\n    phone_number: chance.phone(),\n    picture: chance.url(),\n    preferred_username: chance.string(),\n    profile: chance.url(),\n    website: chance.url(),\n    zoneinfo: chance.string(),\n    address: JSON.stringify(address),\n    updated_at: String(chance.timestamp()),\n  };\n\n  const attributesArg: AttributeType[] = [];\n  jsf.extend(\"chance\", () => new Chance());\n  if (createUserInput.customAttributes !== undefined) {\n    Object.entries(createUserInput.customAttributes).forEach(([key, val]) => {\n      attributesArg.push({\n        Name: \"custom:\" + key,\n        Value: jsf.generate({ type: val }),\n      });\n    });\n  }\n\n  createUserInput.standardAttributes?.forEach(\n    (attribute: keyof StandardAttributes) => {\n      attributesArg.push({\n        Name: attribute,\n        Value: allStandardAttributes[attribute],\n      });\n    }\n  );\n\n  try {\n    const signUpParams: CognitoIdentityServiceProvider.Types.SignUpRequest = {\n      ClientId: createUserInput.clientId,\n      Username: username,\n      Password: password,\n      UserAttributes: attributesArg,\n    };\n    await cognitoClient.signUp(signUpParams).promise();\n  } catch (e) {\n    console.log(e);\n    console.error(\n      \"Failed to create user. Please make sure the clientId is correct, and that the username is valid.\"\n    );\n  }\n\n  return {\n    username,\n    password,\n  };\n};\n\nconst confirmUser = async (input: ConfirmUserInput): Promise<User> => {\n  const cognitoClient: CognitoIdentityServiceProvider =\n    new AWSClient.CognitoIdentityServiceProvider();\n\n  try {\n    await cognitoClient\n      .adminConfirmSignUp({\n        UserPoolId: input.userPoolId,\n        Username: input.username,\n      })\n      .promise();\n  } catch (e) {\n    console.error(\n      \"Failed to confirm sign up. Please make sure the user exists.\"\n    );\n    throw e;\n  }\n\n  return {\n    username: input.username,\n    password: input.password,\n    confirmed: true,\n  };\n};\n\nexport const createUnauthenticatedUser = async (\n  input: CreateUserInput\n): Promise<User> => {\n  const chance = new Chance();\n  const username: string = chance.email();\n  const user: User = await createUser(input, username);\n\n  if (input.confirmed) {\n    return await confirmUser({\n      userPoolId: input.userPoolId,\n      username: username,\n      password: user.password,\n    });\n  }\n\n  return {\n    username: username,\n    password: user.password,\n    confirmed: input.confirmed,\n  };\n};\n\nexport const createAuthenticatedUser = async (\n  input: CreateUserInput\n): Promise<CognitoIdentityServiceProvider.AdminConfirmSignUpResponse> => {\n  const cognitoClient: CognitoIdentityServiceProvider =\n    new AWSClient.CognitoIdentityServiceProvider();\n  const chance = new Chance();\n  const username: string = chance.email();\n\n  const user: User = await createUser(input, username);\n\n  await confirmUser({\n    userPoolId: input.userPoolId,\n    username: username,\n    password: user.password,\n  });\n\n  try {\n    const auth: CognitoIdentityServiceProvider.InitiateAuthResponse =\n      await cognitoClient\n        .initiateAuth({\n          AuthFlow: \"USER_PASSWORD_AUTH\",\n          ClientId: input.clientId,\n          AuthParameters: {\n            USERNAME: user.username,\n            PASSWORD: user.password,\n          },\n        })\n        .promise();\n\n    return {\n      username,\n      password: user.password,\n      idToken: auth.AuthenticationResult?.IdToken,\n      accessToken: auth.AuthenticationResult?.AccessToken,\n    };\n  } catch (e) {\n    console.error(\n      \"Failed to authorize user - please make sure you're using the correct AuthFlow and that the user exists, and is confirmed.\"\n    );\n\n    throw e;\n  }\n};\n"],"file":"cognito.js"}