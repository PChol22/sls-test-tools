{"version":3,"sources":["../../../../src/assertions/toHaveContentEqualTo/index.ts"],"names":["toHaveContentEqualTo","bucketName","objectName","content","s3","AWSClient","S3","params","Bucket","Key","message","object","getObject","promise","JSON","stringify","Body","stringifiedObjectBody","toString","undefined","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;eAEe;AACb;AACA,QAAMA,oBAAN,CACE;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GADF,EAEEC,OAFF,EAG6B;AAC3B,UAAMC,EAAE,GAAG,IAAIC,mBAAUC,EAAd,EAAX;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAEP,UADK;AAEbQ,MAAAA,GAAG,EAAEP;AAFQ,KAAf;AAKA,QAAIQ,OAAJ;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMP,EAAE,CAACQ,SAAH,CAAaL,MAAb,EAAqBM,OAArB,EAArB;;AACA,UAAIC,IAAI,CAACC,SAAL,CAAeJ,MAAM,CAACK,IAAtB,MAAgCF,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAApC,EAA6D;AAC3DO,QAAAA,OAAO,GAAI,YAAWR,UAAW,oBAAmBY,IAAI,CAACC,SAAL,CAClDZ,OADkD,CAElD,EAFF;AAIA,eAAO,4BAAWO,OAAX,EAAoB,IAApB,CAAP;AACD;;AACD,YAAMO,qBAAqB,GAAGN,MAAM,CAACK,IAAP,EAAaE,QAAb,EAA9B;;AACA,UAAID,qBAAqB,KAAKE,SAA9B,EAAyC;AACvCT,QAAAA,OAAO,GAAI,YAAWR,UAAW,oBAAmBY,IAAI,CAACC,SAAL,CAClDZ,OADkD,CAElD,mCAFF;AAIA,eAAO,4BAAWO,OAAX,EAAoB,KAApB,CAAP;AACD;;AAEDA,MAAAA,OAAO,GAAI,YAAWR,UAAW,oBAAmBY,IAAI,CAACC,SAAL,CAClDZ,OADkD,CAElD,2BAA0Bc,qBAAsB,EAFlD;AAIA,aAAO,4BAAWP,OAAX,EAAoB,KAApB,CAAP;AACD,KAvBD,CAuBE,OAAOU,KAAP,EAAc;AACd,UAAI,6BAAiBA,KAAjB,CAAJ,EAA6B;AAC3BV,QAAAA,OAAO,GAAI,YAAWT,UAAW,6BAA4BC,UAAW,cAAxE;AAEA,eAAO,4BAAWQ,OAAX,EAAoB,KAApB,CAAP;AACD;;AACD,UAAI,gCAAoBU,KAApB,CAAJ,EAAgC;AAC9BV,QAAAA,OAAO,GAAI,YAAWT,UAAW,uBAAjC;AAEA,eAAO,4BAAWS,OAAX,EAAoB,KAApB,CAAP;AACD;;AACD,YAAMU,KAAN;AACD;AACF;;AAjDY,C","sourcesContent":["import { AWSClient } from \"helpers/general\";\nimport { testResult, TestResultOutput } from \"utils/testResult\";\nimport { isNoSuchBucketError, isNoSuchKeyError } from \"../utils\";\n\nexport default {\n  // Import & use s3 type ?\n  async toHaveContentEqualTo(\n    { bucketName, objectName }: { bucketName: string; objectName: string },\n    content: Record<string, unknown> | string\n  ): Promise<TestResultOutput> {\n    const s3 = new AWSClient.S3();\n    const params = {\n      Bucket: bucketName,\n      Key: objectName,\n    };\n\n    let message;\n    try {\n      const object = await s3.getObject(params).promise();\n      if (JSON.stringify(object.Body) === JSON.stringify(content)) {\n        message = `expected ${objectName} to have content ${JSON.stringify(\n          content\n        )}`;\n\n        return testResult(message, true);\n      }\n      const stringifiedObjectBody = object.Body?.toString();\n      if (stringifiedObjectBody === undefined) {\n        message = `expected ${objectName} to have content ${JSON.stringify(\n          content\n        )}, but content found was undefined`;\n\n        return testResult(message, false);\n      }\n\n      message = `expected ${objectName} to have content ${JSON.stringify(\n        content\n      )}, but content found was ${stringifiedObjectBody}`;\n\n      return testResult(message, false);\n    } catch (error) {\n      if (isNoSuchKeyError(error)) {\n        message = `expected ${bucketName} to have object with name ${objectName} - not found`;\n\n        return testResult(message, false);\n      }\n      if (isNoSuchBucketError(error)) {\n        message = `expected ${bucketName} to exist - not found`;\n\n        return testResult(message, false);\n      }\n      throw error;\n    }\n  },\n};\n"],"file":"index.js"}