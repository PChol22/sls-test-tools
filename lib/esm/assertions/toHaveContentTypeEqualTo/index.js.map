{"version":3,"sources":["../../../../src/assertions/toHaveContentTypeEqualTo/index.ts"],"names":["toHaveContentTypeEqualTo","bucketName","objectName","contentType","s3","AWSClient","S3","params","Bucket","Key","message","object","getObject","promise","ContentType","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;eAEe;AACb,QAAMA,wBAAN,CACE;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GADF,EAEEC,WAFF,EAG6B;AAC3B,UAAMC,EAAE,GAAG,IAAIC,mBAAUC,EAAd,EAAX;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAEP,UADK;AAEbQ,MAAAA,GAAG,EAAEP;AAFQ,KAAf;AAKA,QAAIQ,OAAJ;;AACA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMP,EAAE,CAACQ,SAAH,CAAaL,MAAb,EAAqBM,OAArB,EAArB;;AACA,UAAIF,MAAM,CAACG,WAAP,KAAuBX,WAA3B,EAAwC;AACtCO,QAAAA,OAAO,GAAI,YAAWR,UAAW,yBAAwBC,WAAY,EAArE;AAEA,eAAO,4BAAWO,OAAX,EAAoB,IAApB,CAAP;AACD;;AACDA,MAAAA,OAAO,GAAI,YAAWR,UAAW,yBAAwBC,WAAY,gCACnEQ,MAAM,CAACG,WAAP,IAAsB,WACvB,EAFD;AAIA,aAAO,4BAAWJ,OAAX,EAAoB,KAApB,CAAP;AACD,KAZD,CAYE,OAAOK,KAAP,EAAc;AACd,UAAI,6BAAiBA,KAAjB,CAAJ,EAA6B;AAC3BL,QAAAA,OAAO,GAAI,YAAWT,UAAW,6BAA4BC,UAAW,cAAxE;AAEA,eAAO,4BAAWQ,OAAX,EAAoB,KAApB,CAAP;AACD;;AACD,UAAI,gCAAoBK,KAApB,CAAJ,EAAgC;AAC9BL,QAAAA,OAAO,GAAI,YAAWT,UAAW,uBAAjC;AAEA,eAAO,4BAAWS,OAAX,EAAoB,KAApB,CAAP;AACD;;AACD,YAAMK,KAAN;AACD;AACF;;AArCY,C","sourcesContent":["import { AWSClient } from \"helpers/general\";\nimport { testResult, TestResultOutput } from \"utils/testResult\";\nimport { isNoSuchBucketError, isNoSuchKeyError } from \"../utils\";\n\nexport default {\n  async toHaveContentTypeEqualTo(\n    { bucketName, objectName }: { bucketName: string; objectName: string },\n    contentType: string\n  ): Promise<TestResultOutput> {\n    const s3 = new AWSClient.S3();\n    const params = {\n      Bucket: bucketName,\n      Key: objectName,\n    };\n\n    let message;\n    try {\n      const object = await s3.getObject(params).promise();\n      if (object.ContentType === contentType) {\n        message = `expected ${objectName} to have content type ${contentType}`;\n\n        return testResult(message, true);\n      }\n      message = `expected ${objectName} to have content type ${contentType}, but content type found was ${\n        object.ContentType ?? \"undefined\"\n      }`;\n\n      return testResult(message, false);\n    } catch (error) {\n      if (isNoSuchKeyError(error)) {\n        message = `expected ${bucketName} to have object with name ${objectName} - not found`;\n\n        return testResult(message, false);\n      }\n      if (isNoSuchBucketError(error)) {\n        message = `expected ${bucketName} to exist - not found`;\n\n        return testResult(message, false);\n      }\n      throw error;\n    }\n  },\n};\n"],"file":"index.js"}