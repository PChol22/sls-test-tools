{"version":3,"sources":["../../../../src/assertions/toContainUser/index.ts"],"names":["toContainUser","userPoolId","username","cognitoClient","AWSClient","CognitoIdentityServiceProvider","adminGetUser","UserPoolId","Username","promise","e","console","log"],"mappings":";;;;;;;AAAA;;AAEA;;eAEe;AACb,QAAMA,aAAN,CACEC,UADF,EAEEC,QAFF,EAG6B;AAC3B,UAAMC,aAA6C,GAAG,IAAIC,mBAAUC,8BAAd,EAAtD;;AACA,QAAI;AACF,YAAMF,aAAa,CAChBG,YADG,CACU;AACZC,QAAAA,UAAU,EAAEN,UADA;AAEZO,QAAAA,QAAQ,EAAEN;AAFE,OADV,EAKHO,OALG,EAAN;AAOA,aAAO,4BACJ,sBAAqBP,QAAS,gCAA+BD,UAAW,EADpE,EAEL,IAFK,CAAP;AAID,KAZD,CAYE,OAAOS,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEA,aAAO,4BACJ,4CAA2CT,UAAW,EADlD,EAEL,KAFK,CAAP;AAID;AACF;;AA1BY,C","sourcesContent":["import { AWSClient } from \"helpers/general\";\nimport { CognitoIdentityServiceProvider } from \"aws-sdk\";\nimport { testResult, TestResultOutput } from \"utils/testResult\";\n\nexport default {\n  async toContainUser(\n    userPoolId: string,\n    username: string\n  ): Promise<TestResultOutput> {\n    const cognitoClient: CognitoIdentityServiceProvider = new AWSClient.CognitoIdentityServiceProvider();\n    try {\n      await cognitoClient\n        .adminGetUser({\n          UserPoolId: userPoolId,\n          Username: username,\n        })\n        .promise();\n\n      return testResult(\n        `User with username ${username} exists in User Pool with Id ${userPoolId}`,\n        true\n      );\n    } catch (e) {\n      console.log(e);\n\n      return testResult(\n        `User does not exist in User Pool with Id ${userPoolId}`,\n        false\n      );\n    }\n  },\n};\n"],"file":"index.js"}